% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{algo_1}
\alias{algo_1}
\title{Rcpp Fit Gaussian Process Classification using MCMC}
\usage{
algo_1(
  y,
  X,
  nsteps,
  nburn,
  nimp,
  init_theta,
  init_marginal_lik,
  init_f,
  prior_density,
  kernel,
  prop_dist_sample,
  prop_dist_density,
  print_every,
  debug,
  chain_no,
  kernel_pass
)
}
\arguments{
\item{y}{binary output vector in {-1, +1}}

\item{X}{predictor matrix}

\item{nsteps}{number of iterations to run the MCMC sampler for}

\item{nburn}{number of 'burn in'}

\item{nimp}{number of samples in importance sampling to approximate the marginal likelihood}

\item{init_theta}{initial conditions for hyperparameter vector}

\item{init_marginal_lik}{initial condition for marginal likelihood}

\item{init_f}{initial condition for latent variables f}

\item{prior_density}{R function returning the prior density at a single point}

\item{kernel}{R function taking two inputs to calculate the kernel matrix}

\item{prop_dist_sample}{R function giving a sample from the proposal distribution}

\item{prop_dist_density}{R function giving the density from the proposal distribution}

\item{print_every}{number of steps until progress is printed to the console}

\item{debug}{logical; if \code{TRUE} then debugging information is printed to the console at each step}

\item{chain_no}{chain that is currently running, only used for printing}

\item{kernel_pass}{string; contains information as to whether the \code{kernel} argument is a function or a string. If a string detailing the kernel to use, a parallel construction of the gram matrix is implemented}
}
\value{
a single chain consisting of samples of the hyperparameter vector and samples of the latent variable \eqn{f}
}
\description{
Pseudo marginal approach to fitting a Gaussian process classification model using Markov Chain Monte Carlo (MCMC)
}
\details{
Combination of \code{\link{laplace_approx}}, \code{\link{get_approx_marginal}} and \code{\link{ell_ss_sample}}, coming
together to fit a Gaussian process classification model using MCMC.

This function retrieves output from all of the above functions, calculates the acceptance probability and accepts or rejects a sample.
The accepted samples are saved in a matrix.
}
