library(gpc)
data <- read.csv("./spambase_csv.csv")
source("our_ivm.R")

# standardize data
colnames(data)
response <- 58
n <- nrow(data)
scaled_data <- scale(data)
data <- cbind(scaled_data[,-58], data[,58])
tdata <- data[sample(1:n, 500),]
X <- tdata[,-response]; y <- tdata[,response]
y[y == 0] <- -1
#pred data
pdata <- data[sample(1:n, 100),]
Xp <- pdata[,-response]; yp <- pdata[,response]
yp[yp == 0] <- -1


# pdata <- read.csv("./spambase_csv.csv")
# scaled_pdata <- scale(pdata)
# pdata <- cbind(scaled_pdata[,-58], pdata[,58])
# pdata <- pdata[sample(1:n, 100),]
# Xp <- pdata[,-response]; yp <- pdata[,response]
# yp[yp == 0] <- -1





f = function(x, y, theta) theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2))
prior_dens = function(x) dgamma(x, 5, 5)
prior_samp = function(x) rgamma(1, 5, 5)
prop_dist_samp = function(x) rnorm(1, x, 0.5)
prop_dist_dens = function(x, theta) dnorm(x, theta, 0.5)
K <- gpc::build_K(as.matrix(X), as.matrix(y),f, c(1,1)) #cov

d <- 50
ivm50 <- our_ivm(y,K, d)
t50 <- system.time( fit <- gpc(y[ivm50], as.matrix(X[ivm50,]), 1000, 0, 1, 100, c(1,1), f, print_every = 10, debug = FALSE) ) #time fit
K50 <- gpc::build_K(as.matrix(X[ivm50,]), as.matrix(y[ivm50]),f, c(1,1))
LA50 <- laplace_approx(y[ivm50],K50)
p50 <- get_approx_marginal(y[ivm50],K50,nimp = 100, c(1,1), LA50) 
tp50 <- system.time(pred50 <- predict.gpc(fit, Xp)) #time pred
class50 <- as.vector(ifelse(pred50 > 0.5, 1, -1))
table(as.vector(ifelse(pred50 > 0.5, 1, -1)) - round(yp, 0) == 0)

d <- 150
ivm150 <- our_ivm(y,K, d)
t150 <- system.time( fit150 <- gpc(y[ivm150], as.matrix(X[ivm150,]), 1000, 0, 1, 100, c(1,1), f, print_every = 10, debug = FALSE) )
K150 <- gpc::build_K(as.matrix(X[ivm150,]), as.matrix(y[ivm150]),f, c(1,1))
LA150 <- laplace_approx(y[ivm150],K150)
p150 <- get_approx_marginal(y[ivm150],K150,nimp = 100, c(1,1), LA150)
tp150 <- system.time( pred150 <- predict.gpc(fit150, Xp) )
class150 <- as.vector(ifelse(pred150 > 0.5, 1, -1))


d <- 250
ivm250 <- our_ivm(y,K, d)
t250 <- system.time(fit250 <- gpc(y[ivm250], as.matrix(X[ivm250,]), 1000, 0, 1, 100, c(1,1), f, print_every = 10, debug = FALSE) )
K250 <- gpc::build_K(as.matrix(X[ivm250,]), as.matrix(y[ivm250]),f, c(1,1))
LA250 <- laplace_approx(y[ivm250],K250)
p250 <- get_approx_marginal(y[ivm250],K250,nimp = 100, c(1,1), LA250)
tp250 <- system.time( pred250 <- predict.gpc(fit250, Xp)  )
class250 <- as.vector(ifelse(pred250 > 0.5, 1, -1))

library(ggplot2)
##accuracy plot
df <- data.frame(d = c("50","150","250"), accuracy = c(mean(class50==yp), mean(class150==yp), mean(class250==yp)))
ggplot(df, aes(x=d )) + geom_bar(aes(weight=accuracy, fill =d)) + scale_x_discrete(limits = c("50","150","250")) + 
  scale_y_continuous(limits =c(0,1)) + labs(title = "Predictive Accuracy vs Subset Size", y="%Accuracy",x="d")  + guides(fill = "none")
##time plot
df2 <- data.frame(d = c("50","150","250"), time = c(t50+tp50, t150+tp150, t250+tp250))
ggplot(df2, aes(x=d )) + geom_bar(aes(weight=time, fill =d)) + scale_x_discrete(limits = c("50","150","250")) + #scale_y_continuous(limits =c(0,1))
    labs(title = "Runtime vs Subset Size", y="Seconds",x="d")  + guides(fill = "none")
       