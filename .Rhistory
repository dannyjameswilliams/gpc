# These should already be installed on the HPC prior to running
library(Rcpp)
library(mvtnorm)
source("fit_model.R")
source("generate_gp_data.R")
# Test HPC first with simulated data
sim_data = generate_gp_data()
k <- kernel_gaussian <- function(x, y, theta){
return(theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2)))
}
gpc(sim_data$y, sim_data$x, 50, 5, 2, 50, init_theta = c(.5,.5), kernel="gaussian")
library(gpc)
# These should already be installed on the HPC prior to running
library(Rcpp)
library(mvtnorm)
source("generate_gp_data.R")
# Test HPC first with simulated data
sim_data = generate_gp_data()
k <- kernel_gaussian <- function(x, y, theta){
return(theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2)))
}
gpc(sim_data$y, sim_data$x, 50, 5, 2, 50, init_theta = c(.5,.5), kernel="gaussian")
gpc(sim_data$y, sim_data$x, 50, 5, 2, 50, init_theta = c(.5,.5), kernel="gaussian")
library(gpc)
gpc(sim_data$y, sim_data$x, 50, 5, 2, 50, init_theta = c(.5,.5), kernel="gaussian")
# These should already be installed on the HPC prior to running
library(Rcpp)
library(mvtnorm)
# Source components of gpc package separately
sourceCpp("gp_C_hpc.cpp")
source("fit_model.R")
source("generate_gp_data.R")
# These should already be installed on the HPC prior to running
library(Rcpp)
library(mvtnorm)
# Source components of gpc package separately
sourceCpp("gp_C_hpc.cpp")
source("fit_model.R")
source("generate_gp_data.R")
# These should already be installed on the HPC prior to running
library(Rcpp)
library(mvtnorm)
# Source components of gpc package separately
sourceCpp("gp_C_hpc.cpp")
source("fit_model.R")
source("generate_gp_data.R")
# These should already be installed on the HPC prior to running
library(Rcpp)
library(mvtnorm)
# Source components of gpc package separately
sourceCpp("gp_C_hpc.cpp")
source("fit_model.R")
source("generate_gp_data.R")
a
# Test HPC first with simulated data
sim_data = generate_gp_data()
k <- kernel_gaussian <- function(x, y, theta){
return(theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2)))
}
gpc(sim_data$y, sim_data$x, 50, 5, 1, 50, init_theta = c(.5,.5), kernel=k)
source("generate_gp_data.R")
# Source components of gpc package separately
sourceCpp("gp_C_hpc.cpp")
# Source components of gpc package separately
sourceCpp("gp_C_hpc.cpp")
# Source components of gpc package separately
sourceCpp("gp_C_hpc.cpp")
# Source components of gpc package separately
sourceCpp("gp_C_hpc.cpp")
# Test HPC first with simulated data
sim_data = generate_gp_data()
k <- kernel_gaussian <- function(x, y, theta){
return(theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2)))
}
# fit
system.time(
gpc(sim_data$y, sim_data$x, 50, 5, 1, 50, init_theta = c(.5,.5), kernel=k)
)    # 46 seconds elapsed
# Source components of gpc package separately
sourceCpp("gp_C_hpc.cpp")
# fit
system.time(
gpc(sim_data$y, sim_data$x, 50, 5, 1, 50, init_theta = c(.5,.5), kernel=k)
)    # 46 seconds elapsed
system.time(
gpc(sim_data$y, sim_data$x, 50, 5, 1, 50, init_theta = c(.5,.5), kernel="gaussian")
)   #
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
setwd("~/Documents/GroupProjectTB2/GPclassification/code/package/gpc")
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
library(gpc)
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
library(Rcpp)
library(gpc)
# read spam data
data <- read.csv("./spambase_csv.csv")
setwd("~/Documents/GroupProjectTB2/GPclassification/code")
# read spam data
data <- read.csv("./spambase_csv.csv")
colnames(data)
response <- 58
n <- nrow(data)
scaled_data <- scale(data)
data[,58]
scaled_data[,58]
data <- cbind(scaled_data[,-58], data[,58])
tdata <- data[sample(1:n, 500),]
X <- tdata[,-response]; y <- tdata[,response]
y[y == 0] <- -1
y
X
gaussian_kernel = function(x, y, theta) theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2))
subset = ivm_subset_selection(X, gaussian_kernel, c(1,1), 250)
subset
nrow(data)
gpc::build_K(X, X, gaussian_kernel, c(1,1))
K = gpc::build_K(X, X, gaussian_kernel, c(1,1))
nimp_seq = seq(10, 400, by=50)
N = 4
pseudo = matrix(NA, length(nimp_seq), N)
for(i in 1:length(nimp_seq)){
for(j in 1:N){
set.seed(j)
pseudo[i, j] = get_approx_marginal(y = dat$y, K = dat$K, nimp = nimp_seq[i],
theta = c(1,1), laplace_approx = la)
cat("\r", j, "/", N); flush.console()
}; cat("\n")
cat(i, "/", length(nimp_seq), "\n", sep="")
}
pseudo = matrix(NA, length(nimp_seq), N)
for(i in 1:length(nimp_seq)){
for(j in 1:N){
set.seed(j)
pseudo[i, j] = get_approx_marginal(y = y, K = K, nimp = nimp_seq[i],
theta = c(1,1), laplace_approx = la)
cat("\r", j, "/", N); flush.console()
}; cat("\n")
cat(i, "/", length(nimp_seq), "\n", sep="")
}
la = laplace_approx(y, K)
nimp_seq = seq(10, 400, by=50)
N = 4
pseudo = matrix(NA, length(nimp_seq), N)
for(i in 1:length(nimp_seq)){
for(j in 1:N){
set.seed(j)
pseudo[i, j] = get_approx_marginal(y = y, K = K, nimp = nimp_seq[i],
theta = c(1,1), laplace_approx = la)
cat("\r", j, "/", N); flush.console()
}; cat("\n")
cat(i, "/", length(nimp_seq), "\n", sep="")
}
library(ggplot2)
library(latex2exp)
pd = data.frame(x=nimp_seq, y = rowMeans(pseudo),
up = apply(pseudo, 1, quantile, probs=0.025),
lo = apply(pseudo, 1, quantile, probs=0.975))
ggplot(pd) + geom_line(aes(x, y, colour = "Mean"), size=1.15) +
geom_point(aes(x, y, colour = "Mean"), size=3) +
geom_ribbon(aes(ymin = lo, ymax = up, x=x, fill="95% Interval"), alpha=0.25) +
xlab(TeX("$N_{imp}$")) + ylab("Approx. Pseudo Marginal")
nimp_seq = seq(10, 500, by=25)
N = 32
pseudo = matrix(NA, length(nimp_seq), N)
for(i in 1:length(nimp_seq)){
for(j in 1:N){
set.seed(j)
pseudo[i, j] = get_approx_marginal_par(y = y, K = K, nimp = nimp_seq[i],
theta = c(1,1), laplace_approx = la)
cat("\r", j, "/", N); flush.console()
}; cat("\n")
cat(i, "/", length(nimp_seq), "\n", sep="")
}
library(ggplot2)
library(latex2exp)
pd = data.frame(x=nimp_seq, y = rowMeans(pseudo),
up = apply(pseudo, 1, quantile, probs=0.025),
lo = apply(pseudo, 1, quantile, probs=0.975))
ggplot(pd) + geom_line(aes(x, y, colour = "Mean"), size=1.15) +
geom_point(aes(x, y, colour = "Mean"), size=3) +
geom_ribbon(aes(ymin = lo, ymax = up, x=x, fill="95% Interval"), alpha=0.25) +
xlab(TeX("$N_{imp}$")) + ylab("Approx. Pseudo Marginal")
pseudo[i, j] = gpc::get_approx_marginal_par(y = y, K = K, nimp = nimp_seq[i],
theta = c(1,1), laplace_approx = la)
nimp_seq = seq(10, 500, by=25)
N = 32
pseudo = matrix(NA, length(nimp_seq), N)
for(i in 1:length(nimp_seq)){
for(j in 1:N){
set.seed(j)
pseudo[i, j] = gpc::get_approx_marginal_par(y = y, K = K, nimp = nimp_seq[i],
theta = c(1,1), laplace_approx = la)
cat("\r", j, "/", N); flush.console()
}; cat("\n")
cat(i, "/", length(nimp_seq), "\n", sep="")
}
library(ggplot2)
library(latex2exp)
pd = data.frame(x=nimp_seq, y = rowMeans(pseudo),
up = apply(pseudo, 1, quantile, probs=0.025),
lo = apply(pseudo, 1, quantile, probs=0.975))
ggplot(pd) + geom_line(aes(x, y, colour = "Mean"), size=1.15) +
geom_point(aes(x, y, colour = "Mean"), size=3) +
geom_ribbon(aes(ymin = lo, ymax = up, x=x, fill="95% Interval"), alpha=0.25) +
xlab(TeX("$N_{imp}$")) + ylab("Approx. Pseudo Marginal")
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
testthat::auto_test()
library(truncsm)
?sphere_sm
devtools::document()
devtools::document()
devtools::document()
load("~/Documents/GroupProjectTB2/packagenew/gpc/data/spam.Rdata")
dim(spam)
load("~/Documents/GroupProjectTB2/packagenew/gpc/data/spam.Rdata")
load("~/Documents/GroupProjectTB2/packagenew/gpc/data/spam.Rdata")
load("~/Documents/GroupProjectTB2/packagenew/gpc/data/spam.RData")
dim(spam)
colnames(spam)
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
library(gpc)
# simulate GP data
library(mvtnorm)
set.seed(123)
n <- 50
x <- sort(runif(n,-10,125))
k <- kernel_gaussian <- function(x, y, sigma, gamma){
return(sigma * exp(-0.5 / gamma^2 * sum((x - y)^2)))
}
K = outer(x, x, Vectorize(function(x, y) k(x, y, 1, 1)))
f <- rmvnorm(1, rep(0, n), K)
y <- rbinom(n, 1, pnorm(f))
y[y == 0] <- -1
f = function(x, y, theta) theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2))
fit = gpc(y, x, 50, 25, 2, 50, c(1,1), f)
fit = gpc(y, x, 50, 25, 2, 50, c(1,1), "gaussian")
plot(fit)
# simulate GP data
library(mvtnorm)
set.seed(123)
n <- 50
x <- sort(runif(n,-10,125))
k <- kernel_gaussian <- function(x, y, sigma, gamma){
return(sigma * exp(-0.5 / gamma^2 * sum((x - y)^2)))
}
K = outer(x, x, Vectorize(function(x, y) k(x, y, 1, 1)))
f <- rmvnorm(1, rep(0, n), K)
y <- rbinom(n, 1, pnorm(f))
y[y == 0] <- -1
f = function(x, y, theta) theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2))
fit = gpc(y, x, 50, 25, 2, 50, c(1,1), f)
fit = gpc(y, x, 50, 25, 2, 50, c(1,1), "gaussian")
plot(fit)
print(fit)
predict(fit, x)
load("~/Documents/GroupProjectTB2/packagenew/gpc/data/spam.Rdata")
load("~/Documents/GroupProjectTB2/packagenew/gpc/data/spam.Rdata")
usethis::use_vignette("Using gpc", "Using the gpc package")
usethis::use_vignette("using_gpc", "Using the gpc package")
str(spam)
data(spam)
str(spam)
library(gpc)
data(spam)
cut = round(0.6*nrow(spam))
train_ind = sample(1:nrow(spam), cut)
test_ind = 1:nrow(spam)[-train_ind]
y = spam[train_ind, 1]
X = spam[train_ind, 2:ncol(spam)]
yp = spam[test_ind, 1]
Xp = spam[test_ind, 2:ncol(spam)]
kernel = function(x, y, theta) theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2))
init_theta = c(1, 1)
subset = ivm_subset_selection(X, kernel, init_theta, nsub = 150)
Xd = X[subset,]
yd = y[subset]
gp_fit = gpc(y = yp,
X = Xp,
nsteps = 500,
nburn = 250,
nchains = 2,
nimp = 200,
init_theta = c(1,1),
kernel = "gaussian",
print_every = Inf
)
pred_train = predict(gp_fit, X)
gp_fit = gpc(y = yp,
X = Xp,
nsteps = 500,
nburn = 250,
nchains = 2,
nimp = 200,
init_theta = c(1,1),
kernel = "gaussian",
print_every = 25
)
pred_train = predict(gp_fit, X)
gp_fit = gpc(y = yp,
X = Xp,
nsteps = 500,
nburn = 250,
nchains = 2,
nimp = 200,
init_theta = c(1,1),
kernel = "gaussian",
print_every = 1
)
pred_train = predict(gp_fit, X)
gp_fit = gpc(y = yd,
X = Xd,
nsteps = 500,
nburn = 250,
nchains = 2,
nimp = 200,
init_theta = c(1,1),
kernel = "gaussian",
print_every = 1
)
library(gpc)
data(spam)
cut = round(0.6*nrow(spam))
train_ind = sample(1:nrow(spam), cut)
test_ind = 1:nrow(spam)[-train_ind]
y = spam[train_ind, 1]
X = spam[train_ind, 2:ncol(spam)]
yp = spam[test_ind, 1]
Xp = spam[test_ind, 2:ncol(spam)]
1:nrow(spam)
test_ind = (1:nrow(spam))[-train_ind]
library(gpc)
data(spam)
cut = round(0.6*nrow(spam))
train_ind = sample(1:nrow(spam), cut)
test_ind = (1:nrow(spam))[-train_ind]
y = spam[train_ind, 1]
X = spam[train_ind, 2:ncol(spam)]
yp = spam[test_ind, 1]
Xp = spam[test_ind, 2:ncol(spam)]
kernel = function(x, y, theta) theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2))
init_theta = c(1, 1)
subset = ivm_subset_selection(X, kernel, init_theta, nsub = 150)
Xd = X[subset,]
yd = y[subset]
gp_fit = gpc(y = yd,
X = Xd,
nsteps = 500,
nburn = 250,
nchains = 2,
nimp = 200,
init_theta = c(1,1),
kernel = "gaussian",
print_every = 10
)
gp_fit = gpc(y = yd,
X = Xd,
nsteps = 50,
nburn = 25,
nchains = 2,
nimp = 200,
init_theta = c(1,1),
kernel = "gaussian",
print_every = 10
)
plot(gp_fit)
debug(plot.gpc)
plot(gp_fit)
library(gpc)
plot(gp_fit)
library(gpc)
data(spam)
cut = round(0.6*nrow(spam))
train_ind = sample(1:nrow(spam), cut)
test_ind = (1:nrow(spam))[-train_ind]
y = spam[train_ind, 1]
X = spam[train_ind, 2:ncol(spam)]
yp = spam[test_ind, 1]
Xp = spam[test_ind, 2:ncol(spam)]
kernel = function(x, y, theta) theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2))
init_theta = c(1, 1)
subset = ivm_subset_selection(X, kernel, init_theta, nsub = 150)
Xd = X[subset,]
yd = y[subset]
gp_fit = gpc(y = yd,
X = Xd,
nsteps = 50,
nburn = 25,
nchains = 2,
nimp = 200,
init_theta = c(1,1),
kernel = "gaussian",
print_every = 10
)
plot(gp_fit)
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
roxygen2::roxygenize(roclets="rd")  # this updates the documentation based on roxygen comments
devtools::check()
library(gpc)
vignette(package="gpc")
library(gpc)
library(gpc)
vignette(package="gpc")
browseVignettes(package="gpc")
browseVignettes("using_gpc")
devtools::install_github("dannyjameswilliams/gpc", build_vignettes = TRUE)
vignette(package="gpc")
vignette("using_gpc")
vignette("using_gpc", "gpc")
browseVignettes("gpc")
devtools::install_github("dannyjamewilliams/gpc")
devtools::install_github("dannyjameswilliams/gpc")
library(covr)
covr::codecov()
# simulate GP data
library(mvtnorm)
set.seed(123)
n <- 50
x <- sort(runif(n,-10,125))
k <- kernel_gaussian <- function(x, y, sigma, gamma){
return(sigma * exp(-0.5 / gamma^2 * sum((x - y)^2)))
}
K = outer(x, x, Vectorize(function(x, y) k(x, y, 1, 1)))
f <- rmvnorm(1, rep(0, n), K)
y <- rbinom(n, 1, pnorm(f))
y[y == 0] <- -1
f = function(x, y, theta) theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2))
# simulate GP data
library(mvtnorm)
set.seed(123)
n <- 50
x <- sort(runif(n,-10,125))
k <- kernel_gaussian <- function(x, y, sigma, gamma){
return(sigma * exp(-0.5 / gamma^2 * sum((x - y)^2)))
}
K = outer(x, x, Vectorize(function(x, y) k(x, y, 1, 1)))
f <- rmvnorm(1, rep(0, n), K)
y <- rbinom(n, 1, pnorm(f))
y[y == 0] <- -1
f = function(x, y, theta) theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2))
library(gpc)
laplace_approx(y, K)
library(gpc)
laplace_approx(y, K)
j = laplace_approx(y, K)
y = rep(-1, length(y))
j = laplace_approx(y, K)
y = rep(1, length(y))
j = laplace_approx(y, K)
y = rep(2, length(y))
j = laplace_approx(y, K)
y = rep(1e5, length(y))
j = laplace_approx(y, K)
# simulate GP data
library(mvtnorm)
set.seed(123)
n <- 50
x <- sort(runif(n,-10,125))
k <- kernel_gaussian <- function(x, y, sigma, gamma){
return(sigma * exp(-0.5 / gamma^2 * sum((x - y)^2)))
}
K = outer(x, x, Vectorize(function(x, y) k(x, y, 1, 1)))
f <- rmvnorm(1, rep(0, n), K)
y <- rbinom(n, 1, pnorm(f))
y[y == 0] <- -1
f = function(x, y, theta) theta[1] * exp(-0.5 / theta[2]^2 * sum((x - y)^2))
library(gpc)
j = laplace_approx(y, K)
fit = gpc(y, x, 50, 25, 2, 50, c(1,1), "gaussian")
plot(fit)
plot(fit, f=TRUE)
print(fit)
predict(fit, x)
# also make a random data chain for theta > 4
random_theta = matrix(rnorm(nrow(fit$chain1)*5), nrow(fit$chain1), 5)
colnames(random_theta) = paste0("theta[",3:7,"]")
fit$chain1 = cbind(fit$chain1[,1:2], random_theta, fit$chain1[,3:ncol(fit$chain1)])
fit$p = fit$p + 5
plot(fit)
debug(plot.gpc)
plot(fit)
theta_var
x$chain1
colnames(x$chain1)
fit$chain1 = cbind(fit$chain1[,1:2], random_theta, fit$chain1[,3:ncol(fit$chain1)])
fit$chain2 = cbind(fit$chain2[,1:2], random_theta, fit$chain2[,3:ncol(fit$chain2)])
fit$p = fit$p + 5
plot(fit)
undebug(plot.gpc)
plot(fit)
fit$chain2
debug(plot.gpc)
plot(fit)
theta_var
chain_var[1]
plot(fit)
chain_var
x[[chain_var[1]]]
chain_var
chain_var[1]
theta_var
x[[chain_var[1]]]
colnames(x[[chain_var[1]]])
theta_var
fit$p = 2
fit$p = fit$p + 5
plot(fit)
